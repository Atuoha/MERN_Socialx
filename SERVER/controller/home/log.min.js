'use strict';const express=require("express"),app=express(),passport=require("passport"),GoogleStrategy=require("passport-google-oauth20").Strategy;LocalStrategy=require("passport-local").Strategy;router=express.Router();crypto=require("crypto");clientId=clientSecret=process.env.CLIENTSECRET;bcrypt=require("bcryptjs");User=require("../../model/User");jwt=require("jsonwebtoken");({JWT_SECRET}=require("../../config/jwt"));router.get("/*",(a,b,c)=>{a.app.locals="";c()});router.get("/signin",(a,b)=>{b.render("home/siginin")});
router.get("/signup",(a,b)=>{b.render("home/signup")});
router.post("/signup",(a,b)=>{if(a.body.email&&a.body.name&&a.body.password)User.findOne({email:a.body.email}).then(c=>{if(c)return b.status(422).json({error:"Email already exists"});{const d=new User;d.email=a.body.email;d.name=a.body.name;bcrypt.genSalt(10,(f,e)=>{bcrypt.hash(a.body.password,e,(g,h)=>{g&&console.log(g);d.password=h;a.body.file&&(d.file=a.body.file);d.save().then(k=>b.status(200).json({message:"Created account successfully"})).catch(k=>console.log(k))})})}}).catch(c=>console.log(c));
else return b.status(422).json({error:"Fields must not be empty"})});passport.use(new LocalStrategy({usernameField:"email"},(a,b,c)=>{a&&b||console.log("Fields Can not be empty");User.findOne({email:a}).then(d=>{d?bcrypt.compare(b,d.password,(f,e)=>{f&&console.log(f);if(e)return console.log(`logged in as ${d.email}`),c(null,d);console.log("Password Mismatch")}):console.log("Email Not Recognised")}).catch(d=>console.log(d))}));passport.serializeUser(function(a,b){b(null,a.id)});
passport.deserializeUser(function(a,b){User.findById(a,function(c,d){b(c,d)})});router.post("/signin",passport.authenticate("local",{failureFlash:!0}),(a,b)=>{User.findOne({email:a.body.email}).then(c=>{const d=jwt.sign({_id:c._id},JWT_SECRET),f={id:c.id,name:c.name,email:c.email};a.user=c;console.log(c);b.json({token:d,loggeduser:f})}).catch(c=>console.log(c))});
router.post("/forgot-password",(a,b)=>{crypto.randomBytes(20,(c,d)=>{c&&console.log(c);const f=d.toString("hex");User.findOne({email:a.body.email}).then(e=>{e?(e.reset_token=f,e.token_expires=Date.now()+36E4,e.save().then(g=>{console.log(`http://localhost:7837/reset/${f}`);b.json({success:"Reset Link Sent, check your mail!"})}).catch(g=>{b.json({error:"Opps! Something went wrong"})})):b.status(404).json({error:"Unrecognised email address"})})})});
router.post("/reset-password",(a,b)=>{console.log(".......receiving..........");User.findOne({reset_token:a.body.token,token_expires:{$gt:Date.now()}}).then(c=>{c?bcrypt.genSalt(10,(d,f)=>{bcrypt.hash(a.body.password,f,(e,g)=>{e&&console.log(e);c.password=g;c.save().then(h=>{b.status(200).json({success:"Password reset successfully :) "});console.log("Resetted")}).catch(h=>{b.status(404).json({error:h})})})}):b.status(404).json({error:"Opps! Link expired or invalid"})})});
router.get("/token/:token",(a,b)=>{User.findOne({reset_token:a.params.token,token_expires:{$gt:Date.now()}}).then(c=>{c||b.status(404).json({error:"Invalid Token"});b.status(202).json({success:c.email})}).catch(c=>console.log(c))});router.get("/signout",(a,b)=>{a.logout();b.redirect("/")});module.exports=router;